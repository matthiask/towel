.. _modelviews:

=========
ModelView
=========

.. module:: towel.modelview


We'll start with simple object list and object detail pages, explaining many
provided tools along the way. Next, this guide covers the CRUD part of Towel,
talk about batch processing a bit and end up with explaining a few components
in more detail.

Please note that Towel's ModelView could be considered similar to Django's own
generic views. However, they do not have the same purpose and software design:
Django's generic views use one class per view, and every instance only processes
one request. Towel's ModelView is more similar to Django's admin site in that
one instance is responsible for many URLs and handles many requests. You have
to take care not to modify ModelView itself during request processing, because
doing this cannot be threadsafe.


Preparing your models, views and URLconfs for ModelView
=======================================================

ModelView has a strong way of how Django-based web applications should be
written. The rigid structure is necessary to build a well-integrated toolset
which will bring you a long way towards successful completion of your project.
If you do not like the design decisions made, ModelView offers hooks to
customize the behavior, but that's not covered in this guide.

For this guide, we assume the following model structure and relationships::

    from django.db import models

    class Publisher(models.Model):
        name = models.CharField(max_length=100)
        address = models.TextField()

    class Author(models.Model):
        name = models.CharField(max_length=100)
        date_of_birth = models.DateField(blank=True, null=True)

    class Book(models.Model):
        title = models.CharField(max_length=100)
        topic = models.CharField(max_length=100)
        authors = models.ManyToManyField(Author)
        published_on = models.DateField()
        publisher = models.ForeignKey(Publisher)


ModelView works with an URL structure similar to the following:

* ``/books/``
* ``/books/<pk>/``
* ``/books/add/``
* ``/books/<pk>/edit/``
* ``/books/<pk>/delete/``

The regular expression used to match the detail page (here <pk>) can be customized. If you'd
rather match on the slug, on a combination of several fields (separated by
dashes or slashes, whatever you want) or on something else, you can do this by
modifying ``urlconf_detail_re``. You only have to make sure that ``get_object``
will know what to do with the extracted parameters.

If you want to use the primary key-based URL configuration, you do not need to add
a ``get_absolute_url`` method to your model, because ModelView will add one
itself. It isn't considered good practice to put primary keys on the web for
everyone to see but it might be okay for your use case.



Object lists
============

Towel`s object lists are handled by ``list_view``. By default, all objects are
shown on one page but this can be modified through ``paginate_by``. The following
code puts a paginated list of books at ``/books/``::

    from myapp.models import Book
    from towel.modelview import ModelView

    class BookModelView(ModelView):
        paginate_by = 20

    book_views = BookModelView(Book)

    urlpatterns = patterns('',
        url(r'^books/', include(book_views.urls)),
    )


This can even be written shorter if you do not want to override any ModelView
methods::

    from myapp.models import Book
    from towel.modelview import ModelView

    urlpatterns = patterns('',
        url(r'^books/', include(ModelView(Book, paginate_by=20).urls)),
    )


The model instances are passed as ``object_list`` into the template by default.
This can be customized by setting ``template_object_list_name`` to a different
value.



Object list call-graph
----------------------

.. module:: towel.modelview.ModelView

The ``list_view`` method does not contain much code, and simply defers to
other methods who do most of the grunt-work. Those methods are shortly explained
here.

.. function:: list_view(self, request)

   Main entry point for object lists, calls all other methods.


.. function:: get_query_set(self, request, *args, **kwargs)

   Receives the request as only argument, must return a queryset of all objects
   a user is allowed to see. The default implementation is ``._default_manager.all()``.


.. function:: handle_search_form(self, request, ctx, queryset=None)
.. function:: handle_batch_form(self, request, ctx, queryset)

   These methods are discussed later, under :ref:`object-list-searchable` and
   :ref:`batch-processing`.


.. function:: paginate_object_list(self, request, queryset, paginate_by=10)

   If ``paginate_by``is given paginates the object list using the ``page`` GET
   parameter. Pagination can be switched off by passing ``all=1`` in the GET
   request.


.. function:: render_list(self, request, context)

   The rendering of object lists is done inside ``render_list``. This method
   calls ``get_template`` to assemble a list of templates to try, and
   ``get_context`` to build the context for rendering the final template. The
   templates tried are as follows:

   * ``<app_label>/<model_name>_list.html`` (in our case, ``myapp/book_list.html``)
   * ``modelview/object_list.html``

   The additional variables passed into the context are documented in
   :ref:`standard-context`.



.. _object-list-searchable:

Making lists searchable
-----------------------

Pagination is not enough for many use cases, we need more! Luckily, Towel
has a pre-made solution for searching object lists too.

:class:`towel.forms.SearchForm` can be used together with
:class:`towel.managers.SearchManager` to build a low-cost implementation of
full text search and filtering by model attributes.

The method used to implement full text search is a bit stupid and cannot
replace mature full text search solutions such as Apache Solr. It might just
solve 80% of the problems with 20% of the effort though.

Code talks. First, we extend our models definition with a  ``Manager``
subclass with a simple search implementation::

    from django.db import models
    from towel.managers import SearchManager

    class BookManager(SearchManager):
        search_fields = ('title', 'topic', 'authors__name',
            'publisher__name', 'publisher__address')

    class Book(models.Model):
        # [...]

        objects = BookManager()

:class:`~towel.managers.SearchManager` supports queries with multiple clauses;
terms may be grouped using apostrophes, plus and minus signs may be optionally
prepended to the terms to determine whether the given term should be included
or not. Example::

    +Django "Shop software" -Satchmo

Please note that you can search fields from other models too. You should
be careful when traversing many-to-many relations however, because you will
get duplicated results if you do not call ``.distinct()`` on the resulting
queryset.

The method ``def _search(self, query)`` does the heavy lifting when
constructing a queryset. You should not need to override this method. If you
want to customize the results further, f.e. apply a site-wide limit for the
objects a certain logged in user may see, you should override
``def search(self, query)``. The default :class:`~towel.modelview.ModelView`
implementation assumes this method signature, but you may of course modify it
freely if you want to use this manager with other or modified code. The default
implementation of ``def search(self, query)`` simply calls
``def _search(self, query)``.


Next, we have to create a :class:`~towel.forms.SearchForm` subclass::

    from django import forms
    from towel import forms as towel_forms
    from myapp.models import Author, Book, Publisher

    class BookSearchForm(towel_forms.SearchForm):
        publisher = forms.ModelChoiceField(Publisher.objects.all(), required=False)
        authors = forms.ModelMultipleChoiceField(Author.objects.all(), required=False)
        published_on__lte = forms.DateField(required=False)
        published_on__gte = forms.DateField(required=False)

        formfield_callback = towel_forms.stripped_formfield_callback


You have to add ``required=False`` to every field if you do not want validation
errors on the first visit to the form (which would not make a lot of sense, but
isn't actively harmful).

As long as you only use search form fields whose names correspond to the keywords
used in Django's ``.filter()`` calls or ``Q()`` objects you do not have to do
anything else.

The ``formfield_callback`` simply substitutes a few fields with whitespace-stripping
equivalents, and adds CSS classes to ``DateInput`` and ``DateTimeInput`` so that
they can be easily augmented by javascript code.

To activate this search form, all you have to do is add an additional parameter
when you instantiate the ModelView subclass::

    from myapp.forms import BookSearchForm
    from myapp.models import Book
    from towel.modelview import ModelView

    urlpatterns = patterns('',
        url(r'^books/', include(ModelView(Book,
            search_form=BookSearchForm,
            paginate_by=20,
            ).urls)),
    )


Searches are automatically remembered using Django's session framework; when
the user visits the object list page for the next time, he'll see the filtered
list, not the standard list. This is very convenient for web applications,
especially if users want to do complex searches.



Object detail pages
===================


Object detail pages are handled by ``detail_view``. All parameters captured in
the ``urlconf_detail_re`` regex are passed on to ``get_object_or_404``, which
passes them to ``get_object``. ``get_object`` first calls ``get_query_set``,
and tries finding a model thereafter.

The rendering is handled by ``render_detail``; the templates tried are

* ``<app_label>/<model_name>_detail.html`` (in our case, ``myapp/book_detail.html``)
* ``modelview/object_detail.html``

The model instance is passed as ``object`` into the template by default. This
can be customized by setting ``template_object_name`` to a different value.


.. _adding-updating:

Adding and updating objects
===========================

Towel offers several facilities to make it easier to build and process complex
forms composed of forms and formsets. The code paths for adding and updating
objects are shared for a big part.

``add_view`` and ``edit_view`` are called first. They defer most of their work
to helper methods.

.. function:: add_view(self, request)

   ``add_view`` does not accept any arguments.


.. function:: edit_view(self, request, *args, **kwargs)

   ``*args`` and ``**kwargs`` are passed as they are directly into ``get_object``.


.. function:: get_form(self, request, instance=None, **kwargs)

   Return a Django form class. The default implementation returns the result
   of ``modelform_factory(self.model, **kwargs)``.


.. function:: get_form_instance(self, request, form_class, instance=None, **kwargs)

   Instantiate the form, for the given instance in the editing case.

   The arguments passed to the form class when instantiating are determined by
   ``extend_args_if_post`` and ``**kwargs``.


.. function:: extend_args_if_post(self, request, args)

   Inserts ``request.POST`` and ``request.FILES`` at the beginning of ``args``
   if ``request.method`` is ``POST``.


.. function:: get_formset_instances(self, request, instance=None, **kwargs)

   Returns an empty ``dict`` by default. Construct your formsets if you want
   any in this method::

       BookFormSet = inlineformset_factory(Publisher, Book)

       class PublisherModelView(ModelView):
           def get_formset_instances(self, request, instance=None, **kwargs):
               args = self.extend_args_if_post(request, [])
               kwargs.setdefault('instance', instance)

               return {
                   'books': BookFormSet(prefix='books', *args, **kwargs),
                   }


.. function:: save_form(self, request, form, change)

   Return an unsaved instance when editing an object. ``change`` is ``True``
   if editing an object.


.. function:: save_model(self, request, instance, form, change)

   Save the instance to the database. ``change`` is ``True`` if editing
   an object.


.. function:: save_formsets(self, request, form, formsets, change)

   Iterates through the ``formsets`` ``dict``, calling ``save_formset`` on
   each.


.. function:: save_formset(self, request, form, formset, change)

   Actually saves the formset instances.


.. function:: post_save(self, request, form, formset, change)

   Hook for adding custom processing after forms, formsets and m2m relations
   have been saved. Does nothing by default.


.. function:: render_form(self, request, context, change)

   Offloads work to ``get_template``, ``get_context`` and ``render_to_response``.
   The templates tried when rendering are:

   * ``<app_label>/<model_name>_form.html``
   * ``modelview/object_form.html``


.. function:: response_add
.. function:: response_edit

   They add a message using the ``django.contrib.messages`` framework and redirect
   the user to the appropriate place, being the detail page of the edited object
   or the editing form if ``_continue`` is contained in the POST request.



.. _deletion:

Object deletion
===============

Object deletion through ModelView is forbidden by default as a safety measure.
However, it is very easy to allow deletion globally::

    class AuthorModelView(ModelView):
        def deletion_allowed(self, request, instance):
            return True


If you wanted to allow deletion only for the creator, you could use something
like this::

    class AuthorModelView(ModelView):
        def deletion_allowed(self, request, instance):
            # Our author model does not have a created_by field, therefore this
            # does not work.
            return request.user == instance.created_by


Often, you want to allow deletion, but only if no related objects are affected
by the deletion. ModelView offers a helper to do that::

    class PublisherModelView(ModelView):
        def deletion_allowed(self, request, instance):
            return self.deletion_allowed_if_only(request, instance, [Publisher])


If there are any books in our system published by the given publisher instance,
the deletion would not be allowed. If there are no related objects for this
instance, the user is asked whether he really wants to delete the object. If
he confirms, the instance is or the instances are deleted for good, depending
on whether there are related objects or not.



.. _standard-context:

Standard context variables
==========================

The following variables are always added to the context:

* ``verbose_name``
* ``verbose_name_plural``
* ``list_url``
* ``add_url``
* ``base_template``

``RequestContext`` is used, therefore all configured context processors are
executed too.


.. _permissions:

Permissions
===========

ModelView's ``get_urls``method assumes that there are two groups of users with
potentially differing permissions: Those who are only allowed to view and those
who may add, change or update objects.

To restrict viewing to authenticated users and editing to managers, you could
do the following::

    from django.contrib.admin.views.decorators import staff_member_required
    from django.contrib.auth.decorators import login_required

    book_views = BookModelView(Book,
        search_form=BookSearchForm,
        paginate_by=20,
        view_decorator=login_required,
        crud_view_decorator=staff_member_required,
        )

If ``crud_view_decorator`` is not provided, it defaults to ``view_decorator``.
``view_decorator`` defaults to ``lambda f: f``, which means that no checking
is performed.

Additionally, ModelView offers the following hooks for customizing permissions:

.. function:: adding_allowed(self, request)
.. function:: editing_allowed(self, request, instance)

    Return ``True`` by default.

.. function:: deletion_allowed(self, request, instance)

   Was already discussed under :ref:`deletion`.



.. _batch-processing:

Batch processing
================

Suppose you want to change the publisher for a selection of books. You could
do this by editing each of them by hand, or by thinking earlier and doing this::


    from django import forms
    from django.contrib import messages
    from towel import forms as towel_forms
    from myapp.models import Book, Publisher

    class BookBatchForm(towel_forms.BatchForm):
        publisher = forms.ModelChoiceField(Publisher.objects.all(), required=False)

        formfield_callback = towel_forms.stripped_formfield_callback

        def _context(self, batch_queryset):
            data = self.cleaned_data

            if data.get('publisher'):
                messages.success(request, 'Updated %s books.' % (
                    batch_queryset.update(publisher=data.get('publisher')),
                    ))

            return {
                'batch_items': batch_queryset,
                }


Activate the batch form like this::

    book_views = BookModelView(Book,
        batch_form=BookBatchForm,
        search_form=BookSearchForm,
        paginate_by=20,
        )


If you have to return a response from the batch form (f.e. because you want to
generate sales reports for a selection of books), you can return a response in
``_context`` using the special-cased key ``response``::

    def _context(self, batch_queryset):
        # [...]

        return {
            'response': HttpResponse(your_report, mimetype='application/pdf'),
            }
